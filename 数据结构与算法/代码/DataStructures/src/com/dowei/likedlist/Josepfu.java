package com.dowei.likedlist;

public class Josepfu {

	public static void main(String[] args) {
		// 测试
		CircleSingleLinkedList circleSingleLinkedList = new CircleSingleLinkedList();
		circleSingleLinkedList.addBoy(5); // 加入5个小孩
		circleSingleLinkedList.showBoy();
		
		//测试小孩出圈是否正确
		circleSingleLinkedList.countBoy(1, 2, 5);

	}

}

//创建一个环形的单向链表
class CircleSingleLinkedList {
	// 创建一个 first 节点
	private Boy first = new Boy(-1);

	// 添加小孩，构建一个环形链表
	public void addBoy(int nums) {
		// nums 做一个数据校验
		if (nums < 1) {
			System.out.println("nums的值不正确");
			return;
		}
		Boy curBoy = null;// 辅助指针
		// 使用for来创建我们的环形链表
		for (int i = 1; i <= nums; i++) {
			Boy boy = new Boy(i);
			// 如果是第一个小孩
			if (i == 1) {
				first = boy;
				first.setNext(first);// 构成环
				curBoy = first;
			} else {
				curBoy.setNext(boy);
				boy.setNext(first);
				curBoy = boy;
			}
		}
	}

	// 遍历当前环形链表
	public void showBoy() {
		// 判断链表是否为空
		if (first == null) {
			System.out.println("没有任何小孩");
			return;
		}

		// 因为first不能动，因此需要一个辅助指针来遍历
		Boy curBoy = first;
		while (true) {
			System.out.printf("小孩的编号%d \n", curBoy.getNo());
			if (curBoy.getNext() == first) {
				break;
			}
			curBoy = curBoy.getNext();
		}
	}

	// 根据用户的输入，计算出小孩出圈的顺序
	/**
	 * 
	 * @param starNo   表示从第几个小孩开始数数
	 * @param countNum 表示数几下
	 * @param nums     表示最初有多少个小孩再圈中
	 */
	public void countBoy(int startNo, int countNum, int nums) {
		// 先对数据进行校验
		if (first == null || startNo < 1 || startNo > nums) {
			System.out.println("参数输入有误，请重新输入");
			return;
		}
		// 创建要给辅助指针，帮助完成小孩出圈
		Boy helper = first;
		// 将辅助变量指向列表最后。
		while (true) {
			if (helper.getNext() == first) {
				break;
			}
			helper = helper.getNext();
		}
		// 小孩报数前，先让first和helper移动k - 1次
		for(int i = 0; i < startNo - 1; i++) {
			first = first.getNext();
			helper = helper.getNext();
		}
		//当小孩报数时，让first 和 helper 指针同时的移动m - 1 次和在，然后出圈
		while(true) {
			if (helper == first) {
				break;
			}
			// 让 first 和helper 指针同时的移动countNum - 1
			for(int i = 0; i < countNum - 1; i++) {
				first = first.getNext();
				helper = helper.getNext();
			}
			//这时 first 指向的节点，就是要出圈的小孩节点。
			System.out.printf("小孩%d出圈\n", first.getNo());
			//这是将first指向的小孩节点出圈
			first = first.getNext();
			helper.setNext(first);
		}
		System.out.printf("最后留在圈中的小孩是：%d",first.getNo());
	}

}

class Boy {
	private int no;
	private Boy next;

	public Boy(int no) {
		this.no = no;
	}

	public int getNo() {
		return no;
	}

	public void setNo(int no) {
		this.no = no;
	}

	public Boy getNext() {
		return next;
	}

	public void setNext(Boy next) {
		this.next = next;
	}

}